# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interface2.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from functools import partial
import divisions
import keyboard
import threading
import os

divisions = divisions.divisionsList

windowSizeX = 350 + 110 *(len(divisions)//4 + (1 if (len(divisions) % 4) else 0))
windowSizeY = 390

divisionsX = 380
divisionsY = 40

workingDirectory = os.getcwd()

disabledStyle = "background-color: #ff8c8c; color: white; border-radius: 5px;"
enabledStyle = "background-color: #a10000; color: white; border-radius: 5px;"

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(windowSizeX, windowSizeY)
        MainWindow.setFixedSize(windowSizeX, windowSizeY)
        MainWindow.setWindowIcon(QtGui.QIcon('xpress/project/imgs/DIC.png'))
        self.startHotkey = 'up'
        self.pauseHotkey = 'down'

        self.stopExec = False

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.divisionsWidgetList = []
        for i in range(len(divisions)):
            self.division = QtWidgets.QLabel(self.centralwidget)
            self.division.setGeometry(QtCore.QRect(divisionsX + 100*(i//4), divisionsY+ 80*(i%4), 61, 61))
            self.division.setText("")
            self.division.setPixmap(QtGui.QPixmap(divisions[i].image))
            self.division.setScaledContents(True)
            self.division.setObjectName("division" + str(i))
            self.divisionsWidgetList.append(self.division)
            self.division.mousePressEvent = lambda event, i=i: self.show_scripts(divisions[i].script_urls)



        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(340, 30, 20, 331))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        # Radio button de opção 'Automático'
        self.autoButton = QtWidgets.QRadioButton(self.centralwidget)
        self.autoButton.setGeometry(QtCore.QRect(105, 250, 82, 17))
        self.autoButton.setObjectName("Automático")
        self.autoButton.setChecked(True)

        # Radio button de opção 'Manual'
        self.manualButton = QtWidgets.QRadioButton(self.centralwidget)
        self.manualButton.setGeometry(QtCore.QRect(215, 250, 82, 17))
        self.manualButton.setObjectName("Manual")
        
        self.dicImg = QtWidgets.QLabel(self.centralwidget)
        self.dicImg.setGeometry(QtCore.QRect(20, 30, 61, 61))
        self.dicImg.setText("")
        self.dicImg.setPixmap(QtGui.QPixmap("xpress/project/imgs/DIC.png"))
        self.dicImg.setScaledContents(True)
        self.dicImg.setObjectName("dicImg")

        self.titleLabel = QtWidgets.QLabel(self.centralwidget)
        self.titleLabel.setGeometry(QtCore.QRect(90, 30, 241, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.titleLabel.setFont(font)
        self.titleLabel.setObjectName("titleLabel")
        self.titleLabel.setWordWrap(True)
        self.titleLabel.setFixedHeight(60)

        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(60, 280, 91, 41))
        self.startButton.setObjectName("startButton")
        self.toggle_state(self.startButton)
        self.startButton.clicked.connect(lambda: self.start_thread(self.on_start_click))

        self.stopButton = QtWidgets.QPushButton(self.centralwidget)
        self.stopButton.setGeometry(QtCore.QRect(210, 280, 91, 41))
        self.stopButton.setObjectName("stopButton")
        self.toggle_state(self.stopButton)
        self.stopButton.clicked.connect(self.on_stop_click)

        self.startHotkeyInput = QtWidgets.QPushButton(self.centralwidget)
        self.startHotkeyInputX = 100
        self.startHotkeyInputY = 135
        self.startHotkeyInput.setGeometry(QtCore.QRect(self.startHotkeyInputX, self.startHotkeyInputY, 41, 25))
        self.startHotkeyInput.setObjectName("startHotkeyInput")
        self.startHotkeyInput.setText(self.startHotkey[0].upper() + self.startHotkey[1:])
        self.startHotkeyInput.clicked.connect(lambda: self.start_thread(self.set_startHotkey))

        self.pauseHotkeyInput = QtWidgets.QPushButton(self.centralwidget)
        self.pauseHotkeyInput.setGeometry(QtCore.QRect(self.startHotkeyInputX, self.startHotkeyInputY+50, 41, 25))
        self.pauseHotkeyInput.setObjectName("pauseHotkeyInput")
        self.pauseHotkeyInput.setText(self.pauseHotkey[0].upper() + self.pauseHotkey[1:])
        self.pauseHotkeyInput.clicked.connect(lambda: self.start_thread(self.set_pauseHotkey))

        self.startHotkeyLabel = QtWidgets.QLabel(self.centralwidget)
        self.startHotkeyLabel.setGeometry(QtCore.QRect(20, 140, 81, 16))
        self.startHotkeyLabel.setObjectName("startHotkeyLabel")

        self.pauseHotkeyLabel = QtWidgets.QLabel(self.centralwidget)
        self.pauseHotkeyLabel.setGeometry(QtCore.QRect(60, 190, 47, 13))
        self.pauseHotkeyLabel.setObjectName("pauseHotkeyLabel")

        self.selectFileButton = QtWidgets.QPushButton(self.centralwidget)
        self.selectFileButton.setGeometry(QtCore.QRect(190, 150, 111, 61))
        self.selectFileButton.setObjectName("selectFileButton")
        self.selectFileButton.setStyleSheet(enabledStyle)
        self.selectFileButton.clicked.connect(self.open_file_dialog)

        self.instructionLabel = QtWidgets.QLabel(self.centralwidget)
        self.instructionLabel.setGeometry(QtCore.QRect(192, 110, 121, 41))
        self.instructionLabel.setWordWrap(True)
        self.instructionLabel.setObjectName("instructionLabel")

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 491, 21))
        self.menubar.setObjectName("menubar")
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setCentralWidget(self.centralwidget)
        MainWindow.setMenuBar(self.menubar)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("[DIC] XPress", "[DIC] XPress"))
        self.titleLabel.setText(_translate("MainWindow", "Departamento de Investigação Criminal\n"))
        self.startButton.setText(_translate("MainWindow", "Iniciar"))
        self.stopButton.setText(_translate("MainWindow", "Encerrar"))
        self.startHotkeyLabel.setText(_translate("MainWindow", "Retomar/Iniciar:"))
        self.pauseHotkeyLabel.setText(_translate("MainWindow", "Pausar:"))
        self.selectFileButton.setText(_translate("MainWindow", "Selecionar..."))
        self.instructionLabel.setText(_translate("MainWindow", "Escolha um script ou selecione um arquivo:"))
        self.autoButton.setText(_translate("MainWindow", "Automático"))
        self.manualButton.setText(_translate("MainWindow", "Manual"))

    def open_file_dialog(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.ReadOnly  # Para abrir apenas leitura
        self.fileName, _ = QtWidgets.QFileDialog.getOpenFileName(MainWindow, "Selecionar Arquivo", "", "Arquivos de Texto (*.txt);;Todos os Arquivos (*)", options=options)

        if self.fileName:
            self.toggle_state(self.startButton)

    # Pausa execução
    def on_pause_press(self):
        global paused
        paused = True

    # Retoma execução
    def on_resume_press(self):
        global paused
        paused = False

    def on_stop_click(self):
        self.stopExec = True
        self.toggle_state(self.stopButton)
        self.toggle_state(self.startButton)

    # Realiza as alterações necessárias na interface e chama a função correspondente à opção selecionada do radio button
    def on_start_click(self):
        if self.fileName:
            self.toggle_state(self.startButton)
            self.toggle_state(self.stopButton)
            if self.autoButton.isChecked(): self.send_sentences_auto()
            if self.manualButton.isChecked(): self.send_sentences_manual()
            self.toggle_state(self.startButton)
            self.stopExec = False


    # Script que envia as mensagens sozinho com controle de pause e pause automático após perguntas
    def send_sentences_auto(self):
        # Inicializa a variável de controle 'pause' que vai ser útil para o mecanismo de pause propriamente dito
        global paused
        paused = False
        
        # Abre o arquivo e monta a lista de mensagens a serem digitadas
        arq = open(self.fileName, 'r', encoding='utf-8')
        sentences = []
        for line in arq:
            msg = line.strip()
            if msg != '' and msg != '\n':
                sentences.append(msg)
        # Espera que o usuário inicie a ação apertando a seta para cima
        keyboard.wait(self.startHotkey)

        for i in range(len(sentences)):
            if self.stopExec:
                break
            sentence = sentences[i]
            if sentence != '' and sentence != '\n':
                if i > 0:

                    # Caso a mensagem enviada anteriormente seja uma pergunta, envia a próxima mensagem imediatamente, sem o tempo de 'digitação'
                    if sentences[i-1][-1] == '?':
                        keyboard.write(sentence)
                    else:
                        # A variável current é necessária para escrever a mensagem novamente após um pause
                        current = ''
                        for char in sentence:

                            if self.stopExec:
                                break

                            current += char
                            keyboard.write(char, 7/len(sentence))


                            # Mecanismo de pause
                            while paused:
                                keyboard.send("ctrl+a")
                                keyboard.send("backspace")
                                keyboard.wait(self.startHotkey)
                                if self.stopExec:
                                    current = ''
                                keyboard.write(current)
                else:
                    keyboard.write(sentence)
                keyboard.send("shift+enter")
                if sentence[-1] == '?':
                    # Pausa a execução caso o último caractere da mensagem for um '?' (uma pergunta)
                    keyboard.wait(self.startHotkey)
        

    # Cada mensagem precisa de uma ação do usuário para ser enviada, permitindo maior controle sobre o script
    def send_sentences_manual(self):
        # Abre o arquivo e monta a lista de mensagens a serem digitadas
        arq = open(self.fileName, 'r', encoding='utf-8')
        sentences = []
        for line in arq:
            msg = line.strip()
            if msg != '' and msg != '\n':
                sentences.append(msg)

        for sentence in sentences:
            if self.stopExec:
                break
            # Escreve a mensagem
            keyboard.wait(self.startHotkey)
            keyboard.write(sentence)

            # Envia a mensagem
            keyboard.wait(self.startHotkey)
            keyboard.send("shift+enter")

    def start_thread(self, function):
        new_thread = threading.Thread(target=function)
        new_thread.start()

    def toggle_state(self, widget):
        if widget.isEnabled():
            widget.setEnabled(False)
            widget.setStyleSheet(disabledStyle)
        else:
            widget.setEnabled(True)
            widget.setStyleSheet(enabledStyle)

    def set_startHotkey(self):
        self.startHotkeyInput.setEnabled(False)
        newKey = keyboard.read_event()
        if newKey.name == self.pauseHotkey:
            pass
        else:
            keyboard.remove_hotkey(self.startHotkey)
            self.startHotkey = newKey.name
            self.startHotkeyInput.setText(self.startHotkey[0].upper() + self.startHotkey[1:])
            self.startHotkeyInput.setEnabled(True)
            keyboard.add_hotkey(self.startHotkey, self.on_resume_press)
    
    def set_pauseHotkey(self):
        self.pauseHotkeyInput.setEnabled(False)
        newKey = keyboard.read_event()
        if newKey.name == self.startHotkey:
            self.pauseHotkeyInput.setEnabled(True)
        else:
            keyboard.remove_hotkey(self.pauseHotkey)
            self.pauseHotkey = newKey.name
            self.pauseHotkeyInput.setText(self.pauseHotkey[0].upper() + self.pauseHotkey[1:])
            self.pauseHotkeyInput.setEnabled(True)
            keyboard.add_hotkey(self.pauseHotkey, self.on_pause_press)

    def show_scripts(self, scripts):
        print(scripts)
        for division in self.divisionsWidgetList:
            # animation = QtCore.QPropertyAnimation(division, b"windowOpacity")
            # animation.setDuration(1000)
            # animation.setStartValue(1.0)
            # animation.setEndValue(0.0)
            # animation.start()
            self.hide_widget(division)
            self.layout = QtWidgets.QGridLayout()
        for i in range(len(scripts)):
            print(scripts)
            self.scriptButton = QtWidgets.QPushButton(self.centralwidget)
            self.scriptButton.setFixedSize(windowSizeX - 410, (windowSizeY - 61)//len(scripts) - 10)
            self.scriptButton.setText(scripts[i][0])
            self.scriptButton.setObjectName("scriptButton" + str(i))
            self.layout.addWidget(self.scriptButton)
            self.scriptButton.show()
        self.backButton = QtWidgets.QPushButton(self.centralwidget)
        self.backButton.setGeometry(divisionsX, windowSizeY - 40, 50, 20)
        self.backButton.setText("←")
        self.backButton.clicked.connect(lambda: self.show_divisions(0))
        self.backButton.show()
        self.container = QtWidgets.QWidget(self.centralwidget)
        self.container.setGeometry(QtCore.QRect(divisionsX - 10, divisionsY - 30, windowSizeX - 390, windowSizeY - 61))
        self.container.setLayout(self.layout)
        self.container.show()

    def show_divisions(self, script):
        self.container.hide()
        self.backButton.hide()
        for division in self.divisionsWidgetList:
            self.show_widget(division)

    def hide_widget(self, widget):
        widget.hide()
        widget.setEnabled(False)

    def show_widget(self, widget):
        widget.show()
        widget.setEnabled(True)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(240, 240, 240))  # Substitua a cor conforme desejado
    MainWindow.setPalette(palette)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # Cria os atalhos para sempre que o usuário pressionar, o valor da variável global paused ser alterado
    keyboard.add_hotkey(ui.pauseHotkey, ui.on_pause_press)
    keyboard.add_hotkey(ui.startHotkey, ui.on_resume_press)

    sys.exit(app.exec_())
